/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dev.ui;

import com.dev.model.Settings;
import com.dev.model.SingleResponseQuestion;

import java.util.List;
import java.util.Set;
/**
 *
 * @author jdh6w
 */
public class LobbySettingsNB extends javax.swing.JPanel {

    /**
     * This field is used to make this class a singleton, which keeps settings when loading the CategorySelector component.
     */
    private static LobbySettingsNB instance = null;

    /**
     * This method returns an instance of the class, and makes a new one if it does not already exist.
     * @param mmnb - MainMenuNB component. Used to call methods to remove this component.
     * @return - an instance of LobbySettingsNB
     */
    public static LobbySettingsNB getLobbySettingsInstance(MainMenuNB mmnb, List<SingleResponseQuestion> alLQuestions){
        if(instance == null){
            instance = new LobbySettingsNB(mmnb, alLQuestions);
        }
        return instance;
    }

    /**
     * This method returns an instance of the class, and makes a new one if it does not already exist.
     * @return - an instance of LobbySettingsNB
     */
    public static LobbySettingsNB getLobbySettingsInstance(){
        if(instance == null){
            instance = new LobbySettingsNB();
        }
        return instance;
    }

    /**
     * This method is called in the testing suite to destroy the instance of this class.
     * We destroy it so we can create two instances, one using the no args constructor,
     * one using the constructor that takes in a MainMenuNB.
     */
    public static void killInstance(){
        instance = null;
    }

    /**
     * Creates new form LobbySettingsNB
     */
    private LobbySettingsNB() {
        initComponents();
        timeSpinner.setValue(30);
        playerSpinner.setValue(1);
        questionSpinner.setValue(10);
        pointSpinner.setValue(1000);
    }

    /**
     * Creates new form LobbySettingsNB
     * @param mmnb - MainMenuNB component. Used to remove this form later.
     */
    private LobbySettingsNB(MainMenuNB mmnb, List<SingleResponseQuestion> allQuestions) {
        initComponents();
        timeSpinner.setValue(30);
        playerSpinner.setValue(1);
        questionSpinner.setValue(10);
        pointSpinner.setValue(1000);
        this.mmnb = mmnb;
        this.alLQuestions = allQuestions;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        titleLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        playerLabel = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        pointLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        openLobbyButton = new javax.swing.JButton();
        categoryField = new javax.swing.JTextField();
        timeSpinner = new javax.swing.JSpinner();
        playerSpinner = new javax.swing.JSpinner();
        questionSpinner = new javax.swing.JSpinner();
        pointSpinner = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();

        jCheckBox1.setText("jCheckBox1");

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 72)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("JearnBox");

        timeLabel.setText("Time per question: (seconds)");

        playerLabel.setText("Max players:");

        questionLabel.setText("Number of questions:");

        pointLabel.setText("Points to win:");

        categoryLabel.setText("Category: (leave blank for all)");

        openLobbyButton.setText("Open Lobby");
        openLobbyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLobbyButtonActionPerformed(evt);
            }
        });

        timeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSpinnerStateChanged(evt);
            }
        });

        playerSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                playerSpinnerStateChanged(evt);
            }
        });

        questionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                questionSpinnerStateChanged(evt);
            }
        });

        pointSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pointSpinnerStateChanged(evt);
            }
        });

        jButton1.setText("Select Multiple");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(categoryLabel)
                                    .addComponent(playerLabel)
                                    .addComponent(questionLabel)
                                    .addComponent(pointLabel)
                                    .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(questionSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(pointSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(categoryField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(timeSpinner)
                                    .addComponent(playerSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(openLobbyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerLabel)
                    .addComponent(playerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionLabel)
                    .addComponent(questionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pointLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryLabel)
                            .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(openLobbyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when hitting the button to open the lobby. It is used to create a Settings object
     * that holds the values set by the spinners and field, remove its inner components, and pass info to the MainMenuNB component
     * to render the InLobbyNB component.
     * @param evt - ActionEvent from hitting the Open Lobby button. Holds info about the source and more.
     */
    private void openLobbyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLobbyButtonActionPerformed
        // TODO add your handling code here:
        //go to next menu
        Settings settings = new Settings();
        settings.setPlayerCount((Integer)(playerSpinner.getValue()));
        settings.setCategory(categoryField.getText());
        settings.setNumQuestions((Integer)(questionSpinner.getValue()));
        settings.setTime((Integer)(timeSpinner.getValue()));
        settings.setPoints((Integer)(pointSpinner).getValue());
        removeCustomComponents();
        mmnb.makeInLobbyMenu(this, settings);
    }//GEN-LAST:event_openLobbyButtonActionPerformed

    /**
     * This method is called when the timeSpinner value changes. It is used to prevent the time per question from being too high or low.
     * @param evt - ActionEvent from changing the spinner. Holds info about the source and more.
     */
    private void timeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSpinnerStateChanged
        // TODO add your handling code here:
        Integer timeVal = (Integer)(timeSpinner.getValue());
        if(timeVal < 1){
            timeSpinner.setValue(1);
        } else if(timeVal > 90){
            timeSpinner.setValue(90);
        }
    }//GEN-LAST:event_timeSpinnerStateChanged

    /**
     * This method is called when the playerSpinner value changes. It is used to prevent the number of players from being too high or low.
     * @param evt - ActionEvent from changing the spinner. Holds info about the source and more.
     */
    private void playerSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_playerSpinnerStateChanged
        // TODO add your handling code here:
        Integer playerVal = (Integer)(playerSpinner.getValue());
        if(playerVal < 1){
            playerSpinner.setValue(1);
        } else if(playerVal > 8){
            playerSpinner.setValue(8);
        }
    }//GEN-LAST:event_playerSpinnerStateChanged

    /**
     * This method is called when the questionSpinner value changes. It is used to prevent the number of questions from being too high or low.
     * @param evt - ActionEvent from changing the spinner. Holds info about the source and more.
     */
    private void questionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_questionSpinnerStateChanged
        // TODO add your handling code here:
        Integer numQs = (Integer)(questionSpinner.getValue());
        if(numQs < 1){
            questionSpinner.setValue(1);
        } else if(numQs > 100){
            questionSpinner.setValue(100);
        }
    }//GEN-LAST:event_questionSpinnerStateChanged

    /**
     * This method is called when the pointSpinner value changes.
     * It is used to prevent the amount of points needed to win from being too high or low.
     * @param evt - ActionEvent from changing the spinner. Holds info about the source and more.
     */
    private void pointSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pointSpinnerStateChanged
        // TODO add your handling code here:
        Integer points = (Integer)(pointSpinner.getValue());
        if(points < 1){
            pointSpinner.setValue(1);
        } else if(points > 10000){
            pointSpinner.setValue(10000);
        }
    }//GEN-LAST:event_pointSpinnerStateChanged

    /**
     * This method is called when the multipleCategory button is pressed. It is used to call the MainMenuNB component to
     * remove this component, and to add the CategorySelector component.
     * @param evt - ActionEvent from hitting the multipleCategory button. Holds info about the source and more.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mmnb.makeCategoryMenu(this);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField categoryField;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JButton openLobbyButton;
    private javax.swing.JLabel playerLabel;
    private javax.swing.JSpinner playerSpinner;
    private javax.swing.JLabel pointLabel;
    private javax.swing.JSpinner pointSpinner;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JSpinner questionSpinner;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    private MainMenuNB mmnb;
    private List<SingleResponseQuestion> alLQuestions;

    /**
     * This method removes all of the components on this form. It is called when the open lobby button is pressed.
     */
    private void removeCustomComponents(){
        this.remove(categoryField);
        this.remove(categoryLabel);
        this.remove(openLobbyButton);
        this.remove(playerLabel);
        this.remove(playerSpinner);
        this.remove(pointLabel);
        this.remove(pointSpinner);
        this.remove(questionLabel);
        this.remove(questionSpinner);
        this.remove(timeLabel);
        this.remove(timeSpinner);
        this.remove(titleLabel);

            
    }

    /**
     * This method is called when the multiple Categories menu is closed. If any categories were selected,
     * the categoryField will be populated with those categories, and it will be set to be uneditable.
     * This method is called from within the MainMenuNB component.
     * @param categories - A set of categories held as Strings.
     */
    public void multipleCategories(Set<String> categories){
        StringBuilder holder = new StringBuilder("");
        for(String s : categories){
            holder.append(s);
            holder.append(", ");
        }
        holder.deleteCharAt(holder.length()-2);
        categoryField.setText(holder.toString());
        categoryField.setEnabled(false);
    }

    /**
     * This method is called when the multiple Categories menu is closed. If no categories were selected,
     * the category field will be set to an empty string, and it will be set to be editable.
     * This method is called from within the MainMenuNB component.
     */
    public void notMultipleCategories(){
        categoryField.setText("");
        categoryField.setEnabled(true);
    }

}

